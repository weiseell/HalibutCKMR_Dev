N = offarray(0,dimseq = list(SEXES=SEXES,POPY=POPY,AGE=A))
nll = 0
##Random walk for recruitment
for(y in 2:length(POPY)){
nll = nll - dnorm(log_rec[y],log_rec[y-1],rec_sd,TRUE)
}
testo = MakeADFun(new_f,parm,random=c("log_rec"))
new_f <- function(parm) reclasso( by=parm, {
getAll(dat,parm)
make_fecundity <- function(s,len){
(len/150)^bexp[s]
}
#exp the sd
rec_sd = exp(log_rec_sd)
##An array for male/female fecundity
bexp <- exp(log_bexp)
rec <- exp(log_rec)
##Array for average fecundity by sex and age
## create prob_by_length array and then fecun array
#prob_len_at_age <- autoloop(
#  s=SEXES, lc=LENGTH_CLASSES, a=AGES,
#  pnorm( ) - pnorm( )
#)
fec_sa <- autoloop(
s=SEXES, a=A,
SUMOVER=list(lc=LENGTH_CLASSES), {
make_fecundity(s,Lvec[lc]) * prob_len_at_age[s,lc,a]
#((Lvec[lc]/150)^bexp[s]) * prob_len_at_age[s,lc,a]
})
##Plus group for later
N = offarray(0,dimseq = list(SEXES=SEXES,POPY=POPY,AGE=A))
nll = 0
##Random walk for recruitment
for(y in 2:length(POPY)){
nll = nll - dnorm(log_rec[y],log_rec[y-1],rec_sd,TRUE)
}
##Put in recruitment
for(s in 1:2){
N[s,,2] = rec/2
}
Z = 0 * N
##Male Mortality
Z[1,,] = exp(log_Z[1])
##Female
Z[2,,] = exp(log_Z[2])
cumsurv_m = rev(cumsum(Z[SLICE=1,SLICE=1,head(A,-1)]))
cumsurv_f = rev(cumsum(Z[SLICE=2,SLICE=1,head(A,-1)]))
total_surv = sum(cumsurv_m+cumsurv_f)
tmp <- (cumsurv_f/total_surv)*exp(log_init_abundance)
tmp <- c( N[SLICE=2,SLICE=1,SLICE=2], tmp)
N[2,1,] <- tmp
tmp <- (cumsurv_m/total_surv)*exp(log_init_abundance)
tmp <- c( N[SLICE=1,SLICE=1,SLICE=2], tmp)
N[1,1,] <- tmp
#N[1,1,A[-1]] <- (cumsurv_m/total_surv)*exp(log_init_abundance)
#N[2,1,A[-1]] <- (cumsurv_f/total_surv)*exp(log_init_abundance)
adults <- A[-1]
for (y in 2:length(POPY)) {
## run abundance for the next year
N[,y,adults] <- autoloop(s = SEXES, a = adults,{
N[s,y-1,a-1]*exp(-1*Z[s,y-1,a-1])
})
#add the plus group
N[,y,max(A)] <- N[,SLICE=y,SLICE=max(A)] + N[,SLICE=y-1,SLICE=max(A)] * exp(-1*Z[,SLICE=y-1,SLICE=max(A)])
}
TRO_SY <- autoloop(
s=SEXES, y=POPY,
SUMOVER=list(a=A),{
N[s,y,a] * fec_sa[s,a]
})
inv_TRO_SY <- 1/TRO_SY
## nll using CKMR data
#Pr_MOP_SYLASYA <- array(0,c(2,Y,length(Lvec),A,2,Y,A))
# generating the POP probabilities
# This does all ages for IDEAl measurement
# autoloop() both CREATES the array and FILLS IT IN
# looping over all the "equals" at the start
# This does the plus-group wrong. We will fix immediately afterwards...
Pr_POP_SYLAB <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, a1=A,
b2=POPY, {
#sd that parent length is currently from the mean
l1 <- Lvec[lc1]
sd1 <- (l1 - la_means_SA[s1,a1])/la_sd_SA[s1,a1]
#age of parent when off is born
a1_at_B2 <- a1 - (y1 - b2)
#length of parent when offspring is born
l1_at_B2 <- la_means_SA[s1,a1_at_B2 |> clamp( A)] +
sd1 * la_sd_SA[s1,a1_at_B2 |> clamp( A)]
Prob <- ifelse(l1_at_B2 > 0,
#!# switch fecundity input from age-based to length-based in the fecundity
(y1 >= b2) * # otherwise Molly was dead before Dolly born
(a1_at_B2 >= 2) *
make_fecundity(s1,l1_at_B2) * inv_TRO_SY[s1,b2],
0)
Prob
})
# PLUS GROUP FIXUP HERE
num_Pr_A_SYL <- autoloop(
a=A, s=SEXES, y=SAMPY, lc=LENGTH_CLASSES,
prob_len_at_age[s,lc,a] * N[s,y,a]
)
denom_SYL <- sumover(num_Pr_A_SYL,'a')
Pr_a_SYL <- autoloop(
a=A, s=SEXES, y=SAMPY, lc=LENGTH_CLASSES,
num_Pr_A_SYL[a, s, y, lc] / denom_SYL[s, y, lc]
)
Pr_POP_SYLSYL <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, s2=SEXES, y2=SAMPY, lc2=LENGTH_CLASSES,
SUMOVER=list(a1= A, a2= A),
{
b2 <- y2 - a2
(b2 >= POPY[1]) *
Pr_POP_SYLAB[ s1, y1, lc1, a1, b2 |> clamp(POPY)] *
Pr_a_SYL[ a1, s1, y1, lc1] *
Pr_a_SYL[ a2, s2, y2, lc2]
})
E_POP_SYLSYL <- n_comps_POP_SYLSYL * Pr_POP_SYLSYL
nll <- -sum(dpois(c(n_POP_SYLSYL),c(E_POP_SYLSYL),log = T),na.rm = T)
##Array for average fecundity by sex and age
#fecun = array(0,c(50,2))
#for()
REPORT(N)
REPORT(Z)
REPORT(E_POP_SYLSYL)
REPORT(fec_sa)
##Return nll
nll
})
testo = MakeADFun(new_f,parm,random=c("log_rec"))
### Just simulated Data input pop dyn test
# random-walk abundance
library(RTMB)
library(offarray)
library(tidyverse)
library(mvbutils)
library(offartmb)
#load simulated data inputs
load("Inputs/CensusSize_Sim_071224.rda")
load("Inputs/Ncomp_POPs_SYLSYL_070924.rda")
load("Inputs/NPOPs_SYLSYL_070924.rda")
#source functions for RTMB model
source("ModelFunction/prob_la.R")
Narray = array(CS_181_195$abundance,c(50,15,2))
dat <- list()
dat$Narray <- Narray
dat$A <- 2:30
dat$POPY <- 1:15
dat$SAMPY <- 10:15
dat$Lvec <- seq(10,220,10)
dat$LENGTH_CLASSES <- 1:length(dat$Lvec)
dat$SEXES <- 1:2
dat$la_key <- read.table("Inputs/LA_MeanSD.txt",header = T, sep = "\t",stringsAsFactors = F)
#number of POPs and comps as array (from script 2 that processes sim results)
dat$n_POP_SYLSYL <- n_POP_SYLSYL
dat$n_comps_POP_SYLSYL <- n_comps_POP_SYLSYL
#split la_key into arrays of means and sds
raw_la_means_SA <- dat$la_key %>%
arrange(sex,AgeClass) %>%
select(sex,AgeClass,mean) %>%
filter(AgeClass <= 30) %>%
spread(AgeClass,mean) %>%
select(-sex)
raw_la_sd_SA <- dat$la_key %>%
arrange(sex,AgeClass) %>%
select(sex,AgeClass,sd) %>%
filter(AgeClass <= 30) %>%
spread(AgeClass,sd) %>%
select(-sex)
dat$la_means_SA <- offarray(as.matrix(raw_la_means_SA),dimseq=list( s=dat$SEXES, a=dat$A))
dat$la_sd_SA <- offarray(as.matrix(raw_la_sd_SA),dimseq=list( s=dat$SEXES, a=dat$A))
# create prob len at age array
raw_prob_len_at_age <- prob_la(Lmax = max(dat$Lvec),
ages = dat$A,
binsize = 10,
dat = dat$la_key)
# Make it into offarray
dat$prob_len_at_age <- offarray(raw_prob_len_at_age,
dimseq=list( s=dat$SEXES, lc=dat$LENGTH_CLASSES, a=dat$A))
## create parameter list
parm <- list()
#log recruitment - random effect length popdynyears
parm$log_rec <- log(Narray[1,,1] + Narray[1,,2])
parm$log_rec_sd = log(0.3)
#parm$log_rec <- rep_len(x = 0.1, length.out = dat$Y)
#total log abundance - split into Y/A abundance within the model
#parm$log_init_abundance <- 0.1
parm$log_init_abundance <- log(sum(Narray[-1,1,]))
# average log survival for M and F
parm$log_Z <- log(c(0.2,0.2))
#a and b values for the fecundity equations
#!# fix these for now
parm$log_bexp <- c(0.1,0.1)
new_f <- function(parm) reclasso( by=parm, {
getAll(dat,parm)
make_fecundity <- function(s,len){
(len/150)^bexp[s]
}
#exp the sd
rec_sd = exp(log_rec_sd)
##An array for male/female fecundity
bexp <- exp(log_bexp)
rec <- exp(log_rec)
##Array for average fecundity by sex and age
## create prob_by_length array and then fecun array
#prob_len_at_age <- autoloop(
#  s=SEXES, lc=LENGTH_CLASSES, a=AGES,
#  pnorm( ) - pnorm( )
#)
fec_sa <- autoloop(
s=SEXES, a=A,
SUMOVER=list(lc=LENGTH_CLASSES), {
make_fecundity(s,Lvec[lc]) * prob_len_at_age[s,lc,a]
#((Lvec[lc]/150)^bexp[s]) * prob_len_at_age[s,lc,a]
})
##Plus group for later
N = offarray(0,dimseq = list(SEXES=SEXES,POPY=POPY,AGE=A))
nll = 0
##Random walk for recruitment
for(y in 2:length(POPY)){
nll = nll - dnorm(log_rec[y],log_rec[y-1],rec_sd,TRUE)
}
##Put in recruitment
for(s in 1:2){
N[s,,2] = rec/2
}
Z = 0 * N
##Male Mortality
Z[1,,] = exp(log_Z[1])
##Female
Z[2,,] = exp(log_Z[2])
cumsurv_m = rev(cumsum(Z[SLICE=1,SLICE=1,head(A,-1)]))
cumsurv_f = rev(cumsum(Z[SLICE=2,SLICE=1,head(A,-1)]))
total_surv = sum(cumsurv_m+cumsurv_f)
tmp <- (cumsurv_f/total_surv)*exp(log_init_abundance)
tmp <- c( N[SLICE=2,SLICE=1,SLICE=2], tmp)
N[2,1,] <- tmp
tmp <- (cumsurv_m/total_surv)*exp(log_init_abundance)
tmp <- c( N[SLICE=1,SLICE=1,SLICE=2], tmp)
N[1,1,] <- tmp
#N[1,1,A[-1]] <- (cumsurv_m/total_surv)*exp(log_init_abundance)
#N[2,1,A[-1]] <- (cumsurv_f/total_surv)*exp(log_init_abundance)
adults <- A[-1]
for (y in 2:length(POPY)) {
## run abundance for the next year
N[,y,adults] <- autoloop(s = SEXES, a = adults,{
N[s,y-1,a-1]*exp(-1*Z[s,y-1,a-1])
})
#add the plus group
N[,y,max(A)] <- N[,SLICE=y,SLICE=max(A)] + N[,SLICE=y-1,SLICE=max(A)] * exp(-1*Z[,SLICE=y-1,SLICE=max(A)])
}
TRO_SY <- autoloop(
s=SEXES, y=POPY,
SUMOVER=list(a=A),{
N[s,y,a] * fec_sa[s,a]
})
inv_TRO_SY <- 1/TRO_SY
## nll using CKMR data
#Pr_MOP_SYLASYA <- array(0,c(2,Y,length(Lvec),A,2,Y,A))
# generating the POP probabilities
# This does all ages for IDEAl measurement
# autoloop() both CREATES the array and FILLS IT IN
# looping over all the "equals" at the start
# This does the plus-group wrong. We will fix immediately afterwards...
Pr_POP_SYLAB <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, a1=A,
b2=POPY, {
#sd that parent length is currently from the mean
l1 <- Lvec[lc1]
sd1 <- (l1 - la_means_SA[s1,a1])/la_sd_SA[s1,a1]
#age of parent when off is born
a1_at_B2 <- a1 - (y1 - b2)
#length of parent when offspring is born
l1_at_B2 <- la_means_SA[s1,a1_at_B2 |> clamp( A)] +
sd1 * la_sd_SA[s1,a1_at_B2 |> clamp( A)]
Prob <- ifelse(l1_at_B2 > 0,
#!# switch fecundity input from age-based to length-based in the fecundity
(y1 >= b2) * # otherwise Molly was dead before Dolly born
(a1_at_B2 >= 2) *
make_fecundity(s1,l1_at_B2) * inv_TRO_SY[s1,b2],
0)
Prob
})
# PLUS GROUP FIXUP HERE
num_Pr_A_SYL <- autoloop(
a=A, s=SEXES, y=SAMPY, lc=LENGTH_CLASSES,
prob_len_at_age[s,lc,a] * N[s,y,a]
)
denom_SYL <- sumover(num_Pr_A_SYL,'a')
Pr_a_SYL <- autoloop(
a=A, s=SEXES, y=SAMPY, lc=LENGTH_CLASSES,
num_Pr_A_SYL[a, s, y, lc] / denom_SYL[s, y, lc]
)
Pr_POP_SYLSYL <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, s2=SEXES, y2=SAMPY, lc2=LENGTH_CLASSES,
SUMOVER=list(a1= A, a2= A),
{
b2 <- y2 - a2
(b2 >= POPY[1]) *
Pr_POP_SYLAB[ s1, y1, lc1, a1, b2 |> clamp(POPY)] *
Pr_a_SYL[ a1, s1, y1, lc1] *
Pr_a_SYL[ a2, s2, y2, lc2]
})
E_POP_SYLSYL <- n_comps_POP_SYLSYL * Pr_POP_SYLSYL
nll <- -sum(dpois(c(n_POP_SYLSYL),c(E_POP_SYLSYL),log = T),na.rm = T)
##Array for average fecundity by sex and age
#fecun = array(0,c(50,2))
#for()
REPORT(N)
REPORT(Z)
REPORT(E_POP_SYLSYL)
REPORT(fec_sa)
##Return nll
nll
})
testo = MakeADFun(new_f,parm,random=c("log_rec"))
debug(MakeADFun)
testo = MakeADFun(new_f,parm,random=c("log_rec"))
debug(new_f)
testo = MakeADFun(new_f,parm,random=c("log_rec"))
Q
debug(new_f)
testo = MakeADFun(new_f,parm,random=c("log_rec"))
debug(new_f)
testo = MakeADFun(new_f,parm,random=c("log_rec"))
q
# random-walk abundance
library(RTMB)
library(offarray)
library(tidyverse)
library(mvbutils)
library(offartmb)
#load simulated data inputs
load("Inputs/CensusSize_Sim_071224.rda")
load("Inputs/Ncomp_POPs_SYLSYL_070924.rda")
load("Inputs/NPOPs_SYLSYL_070924.rda")
#source functions for RTMB model
source("ModelFunction/prob_la.R")
Narray = array(CS_181_195$abundance,c(50,15,2))
dat <- list()
dat$Narray <- Narray
dat$A <- 2:30
dat$POPY <- 1:15
dat$SAMPY <- 10:15
dat$Lvec <- seq(10,220,10)
dat$LENGTH_CLASSES <- 1:length(dat$Lvec)
dat$SEXES <- 1:2
dat$la_key <- read.table("Inputs/LA_MeanSD.txt",header = T, sep = "\t",stringsAsFactors = F)
#number of POPs and comps as array (from script 2 that processes sim results)
dat$n_POP_SYLSYL <- n_POP_SYLSYL
dat$n_comps_POP_SYLSYL <- n_comps_POP_SYLSYL
#split la_key into arrays of means and sds
raw_la_means_SA <- dat$la_key %>%
arrange(sex,AgeClass) %>%
select(sex,AgeClass,mean) %>%
filter(AgeClass <= 30) %>%
spread(AgeClass,mean) %>%
select(-sex)
raw_la_sd_SA <- dat$la_key %>%
arrange(sex,AgeClass) %>%
select(sex,AgeClass,sd) %>%
filter(AgeClass <= 30) %>%
spread(AgeClass,sd) %>%
select(-sex)
dat$la_means_SA <- offarray(as.matrix(raw_la_means_SA),dimseq=list( s=dat$SEXES, a=dat$A))
dat$la_sd_SA <- offarray(as.matrix(raw_la_sd_SA),dimseq=list( s=dat$SEXES, a=dat$A))
# create prob len at age array
raw_prob_len_at_age <- prob_la(Lmax = max(dat$Lvec),
ages = dat$A,
binsize = 10,
dat = dat$la_key)
# Make it into offarray
dat$prob_len_at_age <- offarray(raw_prob_len_at_age,
dimseq=list( s=dat$SEXES, lc=dat$LENGTH_CLASSES, a=dat$A))
## create parameter list
parm <- list()
#log recruitment - random effect length popdynyears
parm$log_rec <- log(Narray[1,,1] + Narray[1,,2])
parm$log_rec_sd = log(0.3)
#parm$log_rec <- rep_len(x = 0.1, length.out = dat$Y)
#total log abundance - split into Y/A abundance within the model
#parm$log_init_abundance <- 0.1
parm$log_init_abundance <- log(sum(Narray[-1,1,]))
# average log survival for M and F
parm$log_Z <- log(c(0.2,0.2))
#a and b values for the fecundity equations
#!# fix these for now
parm$log_bexp <- c(0.1,0.1)
new_f <- function(parm) reclasso( by=parm, {
getAll(dat,parm)
make_fecundity <- function(s,len){
(len/150)^bexp[s]
}
#exp the sd
rec_sd = exp(log_rec_sd)
##An array for male/female fecundity
bexp <- exp(log_bexp)
rec <- exp(log_rec)
##Array for average fecundity by sex and age
## create prob_by_length array and then fecun array
#prob_len_at_age <- autoloop(
#  s=SEXES, lc=LENGTH_CLASSES, a=AGES,
#  pnorm( ) - pnorm( )
#)
fec_sa <- autoloop(
s=SEXES, a=A,
SUMOVER=list(lc=LENGTH_CLASSES), {
make_fecundity(s,Lvec[lc]) * prob_len_at_age[s,lc,a]
#((Lvec[lc]/150)^bexp[s]) * prob_len_at_age[s,lc,a]
})
##Plus group for later
N = offarray(0,dimseq = list(SEXES=SEXES,POPY=POPY,AGE=A))
nll = 0
##Random walk for recruitment
for(y in 2:length(POPY)){
nll = nll - dnorm(log_rec[y],log_rec[y-1],rec_sd,TRUE)
}
##Put in recruitment
for(s in 1:2){
N[s,,2] = rec/2
}
Z = 0 * N
##Male Mortality
Z[1,,] = exp(log_Z[1])
##Female
Z[2,,] = exp(log_Z[2])
cumsurv_m = rev(cumsum(Z[SLICE=1,SLICE=1,head(A,-1)]))
cumsurv_f = rev(cumsum(Z[SLICE=2,SLICE=1,head(A,-1)]))
total_surv = sum(cumsurv_m+cumsurv_f)
tmp <- (cumsurv_f/total_surv)*exp(log_init_abundance)
tmp <- c( N[SLICE=2,SLICE=1,SLICE=2], tmp)
N[2,1,] <- tmp
tmp <- (cumsurv_m/total_surv)*exp(log_init_abundance)
tmp <- c( N[SLICE=1,SLICE=1,SLICE=2], tmp)
N[1,1,] <- tmp
#N[1,1,A[-1]] <- (cumsurv_m/total_surv)*exp(log_init_abundance)
#N[2,1,A[-1]] <- (cumsurv_f/total_surv)*exp(log_init_abundance)
adults <- A[-1]
for (y in 2:length(POPY)) {
## run abundance for the next year
N[,y,adults] <- autoloop(s = SEXES, a = adults,{
N[s,y-1,a-1]*exp(-1*Z[s,y-1,a-1])
})
#add the plus group
N[,y,max(A)] <- N[,SLICE=y,SLICE=max(A)] + N[,SLICE=y-1,SLICE=max(A)] * exp(-1*Z[,SLICE=y-1,SLICE=max(A)])
}
TRO_SY <- autoloop(
s=SEXES, y=POPY,
SUMOVER=list(a=A),{
N[s,y,a] * fec_sa[s,a]
})
inv_TRO_SY <- 1/TRO_SY
## nll using CKMR data
#Pr_MOP_SYLASYA <- array(0,c(2,Y,length(Lvec),A,2,Y,A))
# generating the POP probabilities
# This does all ages for IDEAl measurement
# autoloop() both CREATES the array and FILLS IT IN
# looping over all the "equals" at the start
# This does the plus-group wrong. We will fix immediately afterwards...
Pr_POP_SYLAB <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, a1=A,
b2=POPY, {
#sd that parent length is currently from the mean
l1 <- Lvec[lc1]
sd1 <- (l1 - la_means_SA[s1,a1])/la_sd_SA[s1,a1]
#age of parent when off is born
a1_at_B2 <- a1 - (y1 - b2)
#length of parent when offspring is born
l1_at_B2 <- la_means_SA[s1,a1_at_B2 |> clamp( A)] +
sd1 * la_sd_SA[s1,a1_at_B2 |> clamp( A)]
Prob <- ifelse(l1_at_B2 > 0,
#!# switch fecundity input from age-based to length-based in the fecundity
(y1 >= b2) * # otherwise Molly was dead before Dolly born
(a1_at_B2 >= 2) *
make_fecundity(s1,l1_at_B2) * inv_TRO_SY[s1,b2],
0)
Prob
})
# PLUS GROUP FIXUP HERE
num_Pr_A_SYL <- autoloop(
a=A, s=SEXES, y=SAMPY, lc=LENGTH_CLASSES,
prob_len_at_age[s,lc,a] * N[s,y,a]
)
denom_SYL <- sumover(num_Pr_A_SYL,'a')
Pr_a_SYL <- autoloop(
a=A, s=SEXES, y=SAMPY, lc=LENGTH_CLASSES,
num_Pr_A_SYL[a, s, y, lc] / denom_SYL[s, y, lc]
)
Pr_POP_SYLSYL <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, s2=SEXES, y2=SAMPY, lc2=LENGTH_CLASSES,
SUMOVER=list(a1= A, a2= A),
{
b2 <- y2 - a2
(b2 >= POPY[1]) *
Pr_POP_SYLAB[ s1, y1, lc1, a1, b2 |> clamp(POPY)] *
Pr_a_SYL[ a1, s1, y1, lc1] *
Pr_a_SYL[ a2, s2, y2, lc2]
})
E_POP_SYLSYL <- n_comps_POP_SYLSYL * Pr_POP_SYLSYL
nll <- -sum(dpois(c(n_POP_SYLSYL),c(E_POP_SYLSYL),log = T),na.rm = T)
##Array for average fecundity by sex and age
#fecun = array(0,c(50,2))
#for()
REPORT(N)
REPORT(Z)
REPORT(E_POP_SYLSYL)
REPORT(fec_sa)
##Return nll
nll
})
testo = MakeADFun(new_f,parm,random=c("log_rec"))
QQ
