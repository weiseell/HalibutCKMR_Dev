dat$n_POP_SYLSYL = fill_offcrud(POP_counts,n_POP_SYLSYL,"POP")
dat$n_comps_POP_SYLSYL = fill_offcrud(POP_counts,n_comps_POP_SYLSYL,"ncomp")
nHap <- 7
HapFreq <- 1:nHap
HapFreq <- HapFreq/sum(HapFreq)
raw_la_means_SA <- dat$la_key %>%
arrange(sex,AgeClass) %>%
dplyr::select(sex,AgeClass,mean) %>%
filter(AgeClass <= 30) %>%
spread(AgeClass,mean) %>%
dplyr::select(-sex)
raw_la_sd_SA <- dat$la_key %>%
arrange(sex,AgeClass) %>%
dplyr::select(sex,AgeClass,sd) %>%
filter(AgeClass <= 30) %>%
spread(AgeClass,sd) %>%
dplyr::select(-sex)
dat$la_means_SA <- offarray(as.matrix(raw_la_means_SA),dimseq=list(s=dat$SEXES, a=dat$A))
dat$la_sd_SA <- offarray(as.matrix(raw_la_sd_SA),dimseq=list(s=dat$SEXES, a=dat$A))
raw_prob_len_at_age <- prob_la(Lmax = max(dat$Lvec),
ages = dat$A,
binsize = 10,
dat = dat$la_key)
dat$prob_len_at_age <- offarray(raw_prob_len_at_age,
dimseq=list( s=dat$SEXES, lc=dat$LENGTH_CLASSES, a=dat$A))
dat <- within( dat, {
la_shape_SA <- (la_means_SA/la_sd_SA)^2
la_scale_SA <- la_means_SA/la_shape_SA
})
parm <- list()
parm$rw_log_rec <- rep(log(10000),length(Narray[1,,1]))
parm$rw_log_rec_sd = log(0.3)
parm$noise_logrec_dev <- Narray[1,,1] * 0
parm$noise_rec_dev_sd_log = log(0.3)
parm$log_init_abundance <- log(74884)
parm$log_Z <- log(c(0.18,0.18))
parm$log_bexp <- log(c(3.624,3.624))
parm$log_lucky_litter_par <- 0
parm$ppn_female <- 0.5
new_f <- function(parm) reclasso( by=parm, {
getAll(dat,parm)
len_at_age1 = splinefun(x=pdat11$AgeClass,y=pdat11$pred)
len_at_age2 = splinefun(x=pdat22$AgeClass,y=pdat22$pred)
sd_at_len1 = splinefun(x=sdpredr11$mean,y=sdpredr22$sd)
sd_at_len2 = splinefun(x=sdpredr11$mean,y=sdpredr22$sd)
rw_rec_sd = exp(rw_log_rec_sd)
bexp <- exp(log_bexp)
noise_rec_dev_sd <- exp(noise_rec_dev_sd_log)
lucky_litter_par <- exp(log_lucky_litter_par)
slopea0 <- mean(exp(log_Z))
make_fecundity <- function(s,len){
(len/150)^bexp[s]
}
fec_sa <- autoloop(
s=SEXES, a=A,
SUMOVER=list(lc=LENGTH_CLASSES), {
make_fecundity(s,Lvec[lc]) * prob_len_at_age[s,lc,a]
})
fec_sa_quant <- autoloop(
s=SEXES, a=A, qq=(1:nquant), {
l_q <- qgamma(qq/(nquant + 1),
shape = la_shape_SA[s,a],
scale = la_scale_SA[s,a])
make_fecundity(s,l_q) * (1/nquant)
})
N = offarray(0,dimseq = list(SEXES=SEXES,POPY=POPY,AGE=A))
nll = 0
for(i in 2:length(rw_log_rec)){
nll <- nll - dnorm(rw_log_rec[i],rw_log_rec[i-1],rw_rec_sd)
}
for(s in 1:2){
N[s,,2] = exp(rw_log_rec)
}
Z = 0 * N
Z[1,,] = exp(log_Z[1])
Z[2,,] = exp(log_Z[2])
AAA = A[-1]
Ny0 <- offarray(0, dimseq = list(AGE=AAA))
Ny0[min(AAA)] <- 1
for (a in (min(AAA)+1):max(AAA)) {
Ny0[a] <- Ny0[a-1] * exp(-slopea0)
}
Ny0[max(AAA)] <- Ny0[max(AAA)]/(1-slopea0)
Ny0 = Ny0/sum(Ny0)
REPORT(Ny0)
Ny0 <- Ny0 * exp(log_init_abundance)
for(aa in (min(AAA)):max(AAA)){
N[female,min(POPY),aa] <- Ny0[aa] * ppn_female
N[male,min(POPY),aa] <- Ny0[aa] * (1-ppn_female)
}
Abar_plus <- offarray(0,dimseq = list(SEXES=SEXES,POPY=POPY))
Abar_plus[,1] <- max(A) + 1/(1-exp(-Z[,SLICE=1,SLICE=max(A)]))
adults <- A[-1]
for (y in 2:length(POPY)) {
N[,y,adults] <- autoloop(s = SEXES, a = adults,{
N[s,y-1,a-1]*exp(-Z[s,y-1,a-1])
})
N[,y,max(A)] <- N[,SLICE=y,SLICE=max(A)] + N[,SLICE=y-1,SLICE=max(A)] * exp(-Z[,SLICE=y-1,SLICE=max(A)])
Abar_plus[,y] <- c(((Abar_plus[,SLICE=y-1]+1) * N[,SLICE=y-1,SLICE=max(A)] +
max(A) * N[,SLICE=y-1,SLICE=max(A)-1])/
(N[,SLICE=y-1,SLICE=max(A)] + N[,SLICE=y-1,SLICE=max(A)-1]))
}
maxage <- max(A) + max(POPY)
superAge <- 2:maxage
superN <- offarray(0,dimseq = list(SEXES=SEXES,POPY=POPY,AGE=superAge))
superN[,,A] <- N
superN[,2:max(POPY),max(A)] <- 0
for (y in 2:length(POPY)) {
superN[,SLICE=y,max(A):max(maxage)] <- c(superN[,SLICE=(y-1),(max(A):max(maxage))-1]) *
c(exp(-Z[,SLICE=(y-1),SLICE=max(A)]))
}
Pr_Surv_SYAY <- autoloop(
spp=SEXES,y1=POPY,app=superAge,y2=POPY,{
superN[spp,y2,(app + (y2-y1)) |> clamp(superAge)]/superN[spp,y1,app]
}
)
TRO_SY <- autoloop(
s=SEXES, y=POPY,
SUMOVER=list(a=A),{
N[s,y,a] * fec_sa[s,a]
})
recip_TRO_SY <- 1/TRO_SY
Pr_POP_SYLAB <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, a1=A,
b2=POPY, {
l1 <- Lvec[lc1]
qq1 <- pgamma(l1,shape = la_shape_SA[s1,a1],scale = la_scale_SA[s1,a1])+1e-15
qq1 <- (a1 < 5) * pgamma(l1,shape = la_shape_SA[s1,a1],scale = la_scale_SA[s1,a1])-1e-15
qq1 <- (a1 >= 20) * pgamma(l1,shape = la_shape_SA[s1,a1],scale = la_scale_SA[s1,a1])+1e-15
a1_at_B2 <- a1 - (y1 - b2)
l1_at_B2 <- qgamma(qq1,shape = la_shape_SA[s1,a1_at_B2 |> clamp(A)],
scale = la_scale_SA[s1,a1_at_B2 |> clamp(A)])
Prob <- (y1 >= b2) * # otherwise Molly was dead before Dolly born
(a1_at_B2 >= 2) *
make_fecundity(s1,l1_at_B2) * recip_TRO_SY[s1,b2]
Prob
})
num_Pr_A_SYL <- autoloop(
a=A, s=SEXES, y=SAMPY, lc=LENGTH_CLASSES,
prob_len_at_age[s,lc,a] * N[s,y,a]
)
recip_denom_SYL <- 1 / autoloop(
indices=dimseq( num_Pr_A_SYL)[-1],   # see num_Pr_A_SYL above for actual list
SUMOVER=dimseq( num_Pr_A_SYL)[1], {
num_Pr_A_SYL[a, s, y, lc]
}   # just the "a"
)
Pr_A_SYL <- autoloop(
a=A, s=SEXES, y=SAMPY, lc=LENGTH_CLASSES, {
num_Pr_A_SYL[a, s, y, lc] * recip_denom_SYL[s, y, lc]
}
)
Pr_POP_SYLB <- autoloop(s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES,b2=POPY,
SUMOVER = list(a1 = A), {
Pr_POP_SYLAB[s1,y1,lc1,a1,b2] * Pr_A_SYL[a1,s1,y1,lc1]
})
Pr_POP_SYLSYL1 <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, s2=SEXES, y2=SAMPY, lc2=LENGTH_CLASSES,
SUMOVER=list(a1= A, a2= A),
{
b2 <- y2 - a2
(b2 >= POPY[1]) *
Pr_POP_SYLAB[ s1, y1, lc1, a1, b2 |> clamp(POPY)] *
Pr_A_SYL[ a1, s1, y1, lc1] *
Pr_A_SYL[ a2, s2, y2, lc2]
})
Pr_POP_SYLSYL2 <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, s2=SEXES, y2=SAMPY, lc2=LENGTH_CLASSES, {
Pr_POP_SYLSYL1[s2,y2,lc2,s1,y1,lc1]
}
)
E_POP_SYLSYL <- n_comps_POP_SYLSYL * (Pr_POP_SYLSYL1 + Pr_POP_SYLSYL2)
nll <- nll - sum(dpois(c(n_POP_SYLSYL),c(E_POP_SYLSYL),log = T),na.rm = T)
Pr_HSP_Mat_BB <- autoloop(
b1=POPY,b2=POPY, SUMOVER = list(app=A,qq=(1:nquant)),{
(b2 >= b1) *
fec_sa_quant[female,app,qq] * recip_TRO_SY[female,b1] *
Pr_Surv_SYAY[female,b1,app,b2] *
N[male,b2,(app + (b2-b1)) |> clamp(A)]/N[male,b1,app] *
fec_sa_quant[female,(app + (b2-b1)) |> clamp(A),qq] * recip_TRO_SY[female,b2] *
ifelse(b2==b1,
lucky_litter_par,1)
}
)
Pr_HSP_Mat_SYLSYL <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, s2=SEXES, y2=SAMPY, lc2=LENGTH_CLASSES,
SUMOVER=list(b1=POPY,b2= POPY),{
a1 <- y1 - b1
a2 <- y2 - b2
Pr_HSP_Mat_BB[b1,b2] *
Pr_A_SYL[a1 |> clamp(A), s1, y1, lc1] *
Pr_A_SYL[a2 |> clamp(A), s2, y2, lc2]
}
)
Pr_HSP_Pat_BB <- autoloop(
balpha=POPY,bbeta=POPY, SUMOVER = list(app=A,qq=(1:nquant)),{
b1 <- pmin(balpha, bbeta)
b2 <- pmax(balpha, bbeta)
fec_sa_quant[male,app,qq] * recip_TRO_SY[male,b1] *
Pr_Surv_SYAY[male,b1,app,b2] *
N[male,b2,(app + (b2-b1)) |> clamp(A)]/N[male,b1,app] *
fec_sa_quant[male,(app + (b2-b1)) |> clamp(A),qq] * recip_TRO_SY[male,b2] *
ifelse(b2==b1,
lucky_litter_par,1)
}
)
Pr_HSP_Pat_SYLSYL <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, s2=SEXES, y2=SAMPY, lc2=LENGTH_CLASSES,
SUMOVER=list(b1=POPY,b2= POPY),{
a1 <- y1 - b1
a2 <- y2 - b2
Pr_HSP_Pat_BB[b1,b2] *
Pr_A_SYL[a1 |> clamp(A), s1, y1, lc1] *
Pr_A_SYL[a2 |> clamp(A), s2, y2, lc2]
}
)
Pr_GPP_Mat_SYLB <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, b2=POPY,
SUMOVER=list(app=A), {
bpp <- b2 - app
(bpp <= PopYear1) *
fec_sa[female,app] * recip_TRO_SY[female,b2] *
Pr_POP_SYLB[s1,y1,lc1,bpp |> clamp(POPY)]
}
)
Pr_GPP_Mat_SYLSYL1 <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, s2=SEXES, y2=SAMPY, lc2=LENGTH_CLASSES,
SUMOVER=list(a2 = A),
{
b2 <- y2 - a2
(b2 >= PopYear1) *
Pr_GPP_Mat_SYLB[s1, y1, lc1, b2 |> clamp(POPY)] *
Pr_A_SYL[a2, s2, y2, lc2]
})
Pr_GPP_Mat_SYLSYL2 <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, s2=SEXES, y2=SAMPY, lc2=LENGTH_CLASSES, {
Pr_GPP_Mat_SYLSYL1[s2,y2,lc2,s1,y1,lc1]
}
)
Pr_GPP_Pat_SYLB <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, b2=POPY,
SUMOVER=list(app=A), {
bpp <- b2 - app
(bpp <= PopYear1) *
fec_sa[male,app] * recip_TRO_SY[male,b2] *
Pr_POP_SYLB[s1,y1,lc1,bpp |> clamp(POPY)]
}
)
Pr_GPP_Pat_SYLSYL1 <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, s2=SEXES, y2=SAMPY, lc2=LENGTH_CLASSES,
SUMOVER=list(a2= A),
{
b2 <- y2 - a2
(b2 >= PopYear1) *
Pr_GPP_Pat_SYLB[s1, y1, lc1, b2 |> clamp(POPY)] *
Pr_A_SYL[a2, s2, y2, lc2]
})
Pr_GPP_Pat_SYLSYL2 <- autoloop(
s1=SEXES, y1=SAMPY, lc1=LENGTH_CLASSES, s2=SEXES, y2=SAMPY, lc2=LENGTH_CLASSES, {
Pr_GPP_Pat_SYLSYL1[s2,y2,lc2,s1,y1,lc1]
}
)
Pr_TKP_SYLSYL <- Pr_HSP_Mat_SYLSYL + Pr_HSP_Pat_SYLSYL +
Pr_GPP_Mat_SYLSYL1 + Pr_GPP_Mat_SYLSYL2 +
Pr_GPP_Pat_SYLSYL1 + Pr_GPP_Pat_SYLSYL2
E_N_TKP_SYLSYL <- n_comps_POP_SYLSYL* Pr_TKP_SYLSYL
nll <- nll - sum(dpois(c(N_TKP_SYLSYL),c(E_N_TKP_SYLSYL),log = T),na.rm = T)
REPORT(N)
REPORT(Z)
REPORT(Pr_POP_SYLAB)
REPORT(TRO_SY)
REPORT(E_POP_SYLSYL)
REPORT(E_N_TKP_SYLSYL)
REPORT(fec_sa)
nll
})
tmbmap = list(noise_logrec_dev=as.factor(rep(NA,length(parm$noise_logrec_dev))),noise_rec_dev_sd_log = as.factor(NA),ppn_female = as.factor(NA),log_Z=factor(c(NA,NA)),log_lucky_litter_par=as.factor(NA))
testo = MakeADFun(new_f,parm,random=c("rw_log_rec"),silent=FALSE,map=tmbmap)
repp <- testo$report()
View(repp)
repp[["TRO_SY"]]
repp[["Pr_POP_SYLAB"]]
opt <- nlminb(testo$par, testo$fn, testo$gr,control = list(trace=0,iter.max=1000,eval.max=1000))
grady = testo$gr()
Narray
parm$noise_rec_dev_sd_log = log(0.3)
repp$E_POP_SYLSYL
E_POP_SYSY
E_POP_SYSY
quit()
n
E_POP_SYSY
E_POP_SYY
names(simCheck)
head(simCheck$dadCdf)
dadC
head(dadC)
dadC
E_POP_SYY
head(dadC)
head(dadC)
tail(dadC)
dadC
momC
E_POP_SYYdf
E_POP_YYdf[[1]]
nrow(dadC)
36*2
dadC
quit()
n
